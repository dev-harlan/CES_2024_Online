{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "10605962-09e1-4438-95b2-5d7b2a7ab729",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import solve_ivp\n",
    "from matplotlib.animation import FuncAnimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e61c614-8d39-4049-957d-a2e05eeb4c7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "t = np.linspace(0,10,100)\n",
    "y = np.sin(t)\n",
    "\n",
    "fig, axis = plt.subplots()\n",
    "#axis.plot(t,y)\n",
    "#plt.show()\n",
    "axis.set_xlim([min(t), max(t)])\n",
    "axis.set_ylim([-2,2])\n",
    "animatedPlot, = axis.plot([],[])\n",
    "\n",
    "def updateData(frame):\n",
    "    animatedPlot.set_data(t[:frame], y[:frame])\n",
    "    return animatedPlot\n",
    "\n",
    "anim = FuncAnimation(\n",
    "    fig=fig,\n",
    "    func=updateData,\n",
    "    frames=len(t),\n",
    "    interval=25\n",
    ")\n",
    "anim.save(\"animTest.gif\", writer=\"pillow\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7c12524-36c8-4935-9d3e-a2da8a711924",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
